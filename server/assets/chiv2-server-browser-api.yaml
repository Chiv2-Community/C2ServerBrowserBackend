openapi: 3.0.0
info:
  title: Server Browser API
  version: 1.0.0
paths:
  /servers:
    get:
      summary: Get a list of registered game servers
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerListResponse'
    post:
      summary: Register a game server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerRegistrationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
  /servers/{unique_id}:
    post:
      summary: Update the listing for a game server. This does not count as a heartbeat
      parameters:
        - in: path
          name: unique_id
          description: The unique id of the server being updated
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServerUpdateRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSuccessfulResponse'
  /servers/{unique_id}/heartbeat:
    post:
      parameters:
        - in: path
          name: unique_id
          description: The unique id of the server being updated
          schema:
            type: string
          required: true
      summary: Send a keepalive signal to stay on the server list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HeartbeatSignal'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSuccessfulResponse'
components:
  schemas:
    ServerUpdateRequest:
      type: object
      required:
        - port
        - player_count
        - current_map
        - max_players
      properties:
        port:
          type: integer
          format: int32
          description: The port number the server is running on
        player_count:
          type: integer
          format: int32
          description: The number of players currently on the server
        max_players:
          type: integer
          format: int32
          description: The max number of players the server allows
        current_map:
          type: string
          description: The current map being played on the server
    HeartbeatSignal:
      type: object
      required:
        - port
      properties:
        port:
          type: integer
          format: int32
          description: The port number the server is running on
    Mod:
      type: object
      required:
        - name
        - organization
        - version
      properties:
        name:
          type: string
          description: The name of the mod
        organization:
          type: string
          description: The organization that provides the mod
        version:
          type: string
          description: The version of the mod
    ServerListResponse:
      type: object
      required:
        - servers
      properties:
        servers:
          type: array
          items:
            $ref: '#/components/schemas/Server'
          description: A list of servers
    Server:
      type: object
      required:
        - unique_id
        - ip_address
        - port
        - name
        - description
        - current_map
        - player_count
        - max_players
        - mods
      properties:
        unique_id:
          type: string
          description: The unique identifier of this server
        ip_address:
          type: string
          description: The IP address of the server
        port:
          type: integer
          format: int32
          description: The port number the server is running on
        name:
          type: string
          description: The name of the server
        description:
          type: string
          description: A description of the server
        current_map:
          type: string
          description: The current map being played on the server
        player_count:
          type: integer
          format: int32
          description: The number of players currently on the server
        max_players:
          type: integer
          format: int32
          description: The max number of players on the server
        mods:
          type: array
          items:
            $ref: '#/components/schemas/Mod'
          description: A list of mods running on the server
    ServerRegistrationRequest:
      type: object
      required:
        - port
        - name
        - description
        - current_map
        - player_count
        - max_players
        - mods
      properties:
        port:
          type: integer
          format: int32
          description: The port number the server is running on
        name:
          type: string
          description: The name of the server
        description:
          type: string
          description: A description of the server
        current_map:
          type: string
          description: The current map being played on the server
        player_count:
          type: integer
          format: int32
          description: The number of players currently on the server
        max_players:
          type: integer
          format: int32
          description: The max number of players on the server
        mods:
          type: array
          items:
            $ref: '#/components/schemas/Mod'
          description: A list of mods running on the server
    RegistrationSuccessfulResponse:
      type: object
      required:
        - key
        - refresh_before
        - server
      properties:
        key:
          type: string
          description: The key used for updating the server. Used in X-CHIV2-SERVER-BROWSER-KEY
        refresh_before:
          type: number
          format: double
          description: Unix timestamp for when the server should refresh its registration. Only present if operation was successful
        server:
          $ref: '#/components/schemas/ServerRegistrationRequest'
    UpdateSuccessfulResponse:
      type: object
      required:
        - refresh_before
        - server
      properties:
        server:
          $ref: '#/components/schemas/ServerRegistrationRequest'
        refresh_before:
          type: number
          format: double
          description: Unix timestamp for when the server should refresh its registration. Only present if operation was successful
    ErrorResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            - banned
            - not_registered
            - no_key
            - forbidden
  